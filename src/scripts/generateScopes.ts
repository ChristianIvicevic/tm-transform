import * as eol from "eol";
import * as fs from "fs";
import { isObject } from "lodash";
import * as plist from "plist";
import { supportedLanguages } from "tmt/constants/languages";
import { jsonTextmateGrammar } from "tmt/languages/JSON.tmLanguage";
import { typescriptTextmateGrammar } from "tmt/languages/TypeScript.tmLanguage";
import { typescriptReactTextmateGrammar } from "tmt/languages/TypeScriptReact.tmLanguage";

(() => {
    const scopesFile = fs.createWriteStream("./src/scopes.ts");

    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const findNames = <T extends Record<string, any>>(obj: T, scopes: string[] = []): string[] => [
        ...new Set(
            Object.entries(obj)
                .map(([key, value]) =>
                    isObject(value) === true ? findNames(value, scopes) : key === "name" ? [...scopes, value] : scopes
                )
                .flat(Infinity)
        ),
    ];

    const literalUnion = (array: string[], padStart = 4) => array.map((item) => `${" ".repeat(padStart)}| "${item}"`);
    const exportLiteralUnionAs = (unionName: string, array: string[], padStart = 4) => [
        `export type ${unionName} =`,
        ...literalUnion(array, padStart),
        `${" ".repeat(padStart)};`,
    ];

    [
        "/* eslint-disable */",
        "/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT */",
        "",
        "/**",
        " * Represents a supported Textmate language.",
        " */",
        ...exportLiteralUnionAs("TextmateLanguage", Object.keys(supportedLanguages)),
        "",
        "/**",
        " * Represents a Textmate language scope name.",
        " */",
        ...exportLiteralUnionAs("TextmateLanguageScope", Object.values(supportedLanguages)),
        "",
        "/**",
        " * Map relating languages to their officially supported scope names.",
        " */",
        "export const languageScopeNames: Map<TextmateLanguage, TextmateLanguageScope> =",
        "    new Map([",
        ...Object.entries(supportedLanguages).map(
            ([language, scopeName]) => `        ["${language}", "${scopeName}"],`
        ),
        "    ]);",
        "",
        "/**",
        " * Represents any recognizable Textmate scope.",
        " */",
        "export type TextmateScope =",
        "    | TextmateTypescriptScope",
        "    | TextmateTypescriptReactScope",
        "    | TextmateJsonScope",
        "    ;",
        "",
        "/**",
        " * Represents a recognizable Textmate scope for Typescript.",
        " */",
        ...exportLiteralUnionAs(
            "TextmateTypescriptScope",
            findNames(plist.parse(typescriptTextmateGrammar) as Record<string, unknown>)
                .map((scope) => (scope === "TypeScript" ? "source.ts" : scope))
                .sort((a, b) => a.localeCompare(b))
        ),
        "",
        "/**",
        " * Represents a recognizable Textmate scope for Typescript React.",
        " */",
        ...exportLiteralUnionAs(
            "TextmateTypescriptReactScope",
            findNames(plist.parse(typescriptReactTextmateGrammar) as Record<string, unknown>)
                .map((scope) => (scope === "TypeScriptReact" ? "source.tsx" : scope))
                .sort((a, b) => a.localeCompare(b))
        ),
        "",
        "/**",
        " * Represents a recognizable Textmate scope for JSON.",
        " */",
        ...exportLiteralUnionAs(
            "TextmateJsonScope",
            findNames(plist.parse(jsonTextmateGrammar) as Record<string, unknown>).sort((a, b) => a.localeCompare(b))
        ),
    ].forEach((line) => scopesFile.write(eol.after(line)));

    scopesFile.close();
})();
